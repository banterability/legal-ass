// Generated by CoffeeScript 1.8.0
(function() {
  var filter, last, truncateAtLength, truncateAtWordBoundary, _ref;

  _ref = require('underscore'), filter = _ref.filter, last = _ref.last;

  module.exports = function(phrase, options) {
    var ellipses, phraseLength, truncationOptions;
    if (options == null) {
      options = {};
    }
    if (phrase.length <= options.length) {
      return phrase;
    }
    ellipses = options.ellipses || 'â€¦';
    phraseLength = options.length - ellipses.length;
    truncationOptions = {
      length: phraseLength,
      ellipses: ellipses
    };
    if (options.splitWords) {
      return truncateAtLength(phrase, truncationOptions);
    } else {
      return truncateAtWordBoundary(phrase, truncationOptions);
    }
  };

  truncateAtWordBoundary = function(phrase, _arg) {
    var ellipses, lastPossibleWord, length, match, wordBoundaries, wordBoundaryRegex;
    length = _arg.length, ellipses = _arg.ellipses;
    wordBoundaryRegex = /\s/g;
    wordBoundaries = [];
    while (match = wordBoundaryRegex.exec(phrase)) {
      wordBoundaries.push(match.index);
    }
    lastPossibleWord = last(filter(wordBoundaries, function(boundary) {
      return boundary <= length;
    }));
    if (lastPossibleWord == null) {
      return truncateAtLength(phrase, {
        length: length,
        ellipses: ellipses
      });
    }
    return truncateAtLength(phrase, {
      length: lastPossibleWord,
      ellipses: ellipses
    });
  };

  truncateAtLength = function(phrase, _arg) {
    var ellipses, length, truncatedPhrase;
    length = _arg.length, ellipses = _arg.ellipses;
    truncatedPhrase = phrase.slice(0, length);
    return truncatedPhrase.trimRight() + ellipses;
  };

}).call(this);
